{"version":3,"sources":["common.ts","PlayerEntryView.tsx","MainHeader.tsx","Navigation.tsx","ScoreboardControl.tsx","Scoreboard.tsx","VictoryScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["capitaliseString","s","charAt","toUpperCase","slice","categories","Female","Male","Freestyle","ContextTotalDisplayMethod","React","createContext","undefined","PlayerEntryView","visibility","totalDisplayMethod","matchStateMethod","matchPlayerInformationMethod","useState","mat","age","gender","style","weight","matchInformation","setMatchInformation","playerEntries","setPlayerEntries","top","left","width","height","position","display","justifyContent","alignItems","backgroundColor","className","id","playerColour","Provider","value","setDetails","matchState","setMatchState","setMatchPlayerInformation","totalDisplayState","setTotalDisplayState","theGameType","gameType","initialTimerValue","playersSet","currentTime","playerEntryView","PlayerEntry","type","firstName","onChange","e","newPlayerEntry","target","lastName","clubName","MatchInformation","ageOptions","Object","keys","map","key","genderOptions","styleOptions","weightOptions","updateDropDowns","dropDown","zeroGender","zeroStyle","zeroWeight","parseInt","Error","htmlFor","name","SubmitMatchDetails","useContext","onClick","MainHeader","alt","src","Navigation","ResetCurrentMatch","console","log","PointsControl","updateScore","PenaltyControl","PinControl","phases","Scoreboard","timer","Victory","matchPlayerInformation","updateCurrentTime","useCallback","getTimeValues","toString","resolveTimerEnd","phase","paused","useEffect","addEventListener","removeEventListener","player","score","includes","started","newMatchPlayerInformation","checkVictoryState","MiddleView","start","countdown","startValues","seconds","pause","icon","PlayerDataView","ScoreBox","technicalSuperiorityThreshold","blue","red","VictoryScreen","victoryState","SetVisibilityOf","playerName","reason","initialTotalDisplayState","mainHeader","navigation","scoreboard","victoryScreen","initialMatchPlayerInformation","initialMatchState","initialVictoryState","App","Timer","setVictoryState","stop","playerInfo","component","state","newTotalDisplayState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e7d9eb5e.chunk.js","sourcesContent":["export const capitaliseString: CapitaliseString = (s: string) => {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  };","import React, { useContext, useState } from 'react';\nimport './PlayerEntryView.css';\nimport { capitaliseString } from './common';\n\nconst categories: { [index: string]: { [index: string]: { [index: string]: number[] } } } =\n{\n    // Age only block\n    \"6-7 yrs\": {\n        \"N/A\": {\n            \"N/A\": [19, 23, 27, 35, 42, 53, 66, 73]\n        }\n    },\n    \"8-9 yrs\": {\n        \"N/A\": {\n            \"N/A\": [23, 27, 35, 42, 53, 66, 73]\n        }\n    },\n    \"10-11 yrs\": {\n        \"N/A\": {\n            \"N/A\": [23, 27, 35, 42, 53, 66, 73, 85]\n        }\n    },\n    // Age and sex block\n    \"12-13 yrs\": {\n        Female: {\n            \"N/A\": [33, 37, 44, 50, 55, 62, 73, 85]\n        },\n        Male: {\n            \"N/A\": [35, 41, 48, 55, 62, 69, 75, 89]\n        },\n    },\n    \"14-15 yrs\": {\n        Female: {\n            \"N/A\": [35, 40, 45, 50, 55, 60, 65, 70]\n        },\n        Male: {\n            \"N/A\": [35, 42, 49, 56, 63, 70, 78, 89]\n        },\n    },\n    \"16-17 yrs\": {\n        Female: {\n            \"N/A\": [40, 43, 49, 56, 61, 65, 69, 73]\n        },\n        Male: {\n            \"N/A\": [48, 55, 62, 69, 74, 86, 92, 110]\n        },\n    },\n    // Age, sex, and male style block\n    \"18-20 yrs\": {\n        Female: {\n            \"N/A\": [50, 53, 57, 62, 68, 76, 85],\n        },\n        Male: {\n            Freestyle: [57, 65, 74, 79, 86, 92, 97, 125],\n            \"Greco-Roman\": [60, 67, 77, 87, 97, 130]\n        }\n    },\n    \"21yrs+\": {\n        Female: {\n            \"N/A\": [50, 53, 57, 62, 68, 76, 85],\n        },\n        Male: {\n            Freestyle: [57, 65, 74, 79, 86, 92, 97, 125],\n            \"Greco-Roman\": [60, 67, 77, 87, 97, 130]\n        }\n    }\n}\n\ntype PlayerEntryViewProps = {\n    visibility: boolean;\n    totalDisplayMethod: TotalDisplayMethod;\n    matchStateMethod: MatchStateMethod;\n    matchPlayerInformationMethod: MatchPlayerInformationMethod;\n};\n\nconst ContextTotalDisplayMethod = React.createContext<TotalDisplayMethod>(undefined!);\n\nexport const PlayerEntryView: React.VFC<PlayerEntryViewProps> = ({ visibility, totalDisplayMethod, matchStateMethod, matchPlayerInformationMethod }) => {\n    //Store the state of the entered match information\n    const initialMatchInformation: MatchInformation = {\n        mat: \"A\",\n        age: \"6-7 yrs\",\n        gender: \"N/A\",\n        style: \"N/A\",\n        weight: 19\n    };\n    const [matchInformation, setMatchInformation] = useState(initialMatchInformation);\n    //Store the state of the entered player information\n    const initialPlayerEntries: { [playerColor: string]: MatchPlayer } = {\n        \"red\": {\n            \"playerColor\": \"red\",\n            \"firstName\": \"Red First Name\",\n            \"lastName\": \"\",\n            \"clubName\": \"\",\n            \"warnings\": 0,\n            \"score\": 0\n        },\n        \"blue\": {\n            \"playerColor\": \"blue\",\n            \"firstName\": \"Blue First Name\",\n            \"lastName\": \"\",\n            \"clubName\": \"\",\n            \"warnings\": 0,\n            \"score\": 0\n        }\n    }\n\n    const [playerEntries, setPlayerEntries] = useState(initialPlayerEntries);\n\n    const setDetails = () => {\n        //set the matchInformation to the matchState, playerInformation from the App Component and close the playerEntryView\n        const [matchState, setMatchState] = matchStateMethod;\n        const [, setMatchPlayerInformation] = matchPlayerInformationMethod;\n        const [totalDisplayState, setTotalDisplayState] = totalDisplayMethod;\n\n        //determine game type\n        const gameType = () => {\n            let gameType = \"\";\n            if (matchInformation.style === \"Greco-Roman\") {\n                gameType = \"Senior Greco-Roman\";\n            } else if (matchInformation.age === \"18-20 yrs\" || matchInformation.age === \"21yrs+\") {\n                gameType = \"Senior Freestyle\";\n            } else {\n                gameType = \"Junior Freestyle\";\n            }\n            return gameType;\n        }\n\n        const theGameType = gameType();\n\n        let initialTimerValue = \"\";\n\n        if (theGameType === \"Junior Freestyle\") {\n            initialTimerValue = \"2:00\";\n        } else {\n            initialTimerValue = \"3:00\";\n        }\n\n\n        setMatchState({ ...matchState, ...matchInformation, playersSet: true, currentTime: initialTimerValue, gameType: theGameType });\n        const copyPlayerEntries = { ...playerEntries };\n        setMatchPlayerInformation(copyPlayerEntries);\n        setTotalDisplayState({ ...totalDisplayState, playerEntryView: false });\n\n    }\n\n    return (\n\n        < div style={visibility ? {\n            top: \"0\",\n            left: \"0\",\n            width: \"100vw\",\n            height: \"100vh\",\n            position: \"fixed\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            backgroundColor: \"#8080807E\",\n\n        }\n            : { display: \"none\" }}>\n            <div className=\"playerEntryView\" id=\"playerEntryView\">\n                <div>\n                    <h1>Match Details</h1>\n                </div>\n                <div id=\"playerEntryMain\">\n                    <PlayerEntry playerColour={\"red\"} playerEntries={playerEntries} setPlayerEntries={setPlayerEntries} />\n                    <PlayerEntry playerColour={\"blue\"} playerEntries={playerEntries} setPlayerEntries={setPlayerEntries} />\n                    <MatchInformation matchInformation={matchInformation} setMatchInformation={setMatchInformation} />\n                </div>\n                <div id=\"playerEntrySubmission\">\n                    <ContextTotalDisplayMethod.Provider value={totalDisplayMethod}>\n                        <SubmitMatchDetails setDetails={setDetails} />\n                    </ContextTotalDisplayMethod.Provider>\n                </div>\n            </div>\n        </div>\n\n    );\n\n};\n\ntype PlayerEntryProps = {\n    playerColour: string;\n    playerEntries: { [playerColor: string]: MatchPlayer };\n    setPlayerEntries: React.Dispatch<React.SetStateAction<{ [playerColor: string]: MatchPlayer }>>;\n}\n\nconst PlayerEntry: React.VFC<PlayerEntryProps> = ({ playerColour, playerEntries, setPlayerEntries }) => {\n    return (\n        <div className={\"playerEntry \" + playerColour}>\n            <label>\n                {capitaliseString(playerColour)}'s First Name<br />\n                <input type=\"text\" value={playerEntries[playerColour].firstName} onChange={e => {\n                    const newPlayerEntry = { ...playerEntries };\n                    newPlayerEntry[playerColour].firstName = e.target.value;\n                    setPlayerEntries(newPlayerEntry as MatchPlayerInformation);\n                }} />\n            </label>\n            <label>\n                {capitaliseString(playerColour)}'s Last Name<br />\n                <input type=\"text\" value={playerEntries[playerColour].lastName} onChange={e => {\n                    const newPlayerEntry = { ...playerEntries };\n                    newPlayerEntry[playerColour].lastName = e.target.value;\n                    setPlayerEntries(newPlayerEntry as MatchPlayerInformation);\n                }} />\n            </label>\n            <label>\n                {capitaliseString(playerColour)}'s Club Name<br />\n                <input type=\"text\" value={playerEntries[playerColour].clubName} onChange={e => {\n                    const newPlayerEntry = { ...playerEntries };\n                    newPlayerEntry[playerColour].clubName = e.target.value;\n                    setPlayerEntries(newPlayerEntry as MatchPlayerInformation);\n                }} />\n            </label>\n        </div>\n    );\n\n};\n\ntype MatchInformationProps = {\n    matchInformation: MatchInformation;\n    setMatchInformation: React.Dispatch<React.SetStateAction<MatchInformation>>;\n};\n\nconst MatchInformation: React.VFC<MatchInformationProps> = ({ matchInformation, setMatchInformation }) => {\n    const ageOptions = Object.keys(categories).map((value) => <option value={value} key={value}>{value}</option>);\n    const genderOptions = Object.keys(categories[matchInformation.age]).map((value) => <option value={value} key={value}>{value}</option>);\n    const styleOptions = Object.keys(categories[matchInformation.age][matchInformation.gender]).map((value: string) => <option value={value} key={value}>{value}</option>);\n    const weightOptions = categories[matchInformation.age][matchInformation.gender][matchInformation.style].map((value: number) => <option value={value} key={value}>{value}</option>);\n\n    const updateDropDowns = (e: React.ChangeEvent<HTMLSelectElement>, dropDown: string) => {\n        //resets every subsequent dropdown to the default 0 index value, forces an update of state to ensure that valid options are stored\n        switch (dropDown) {\n            case \"mat\":\n                setMatchInformation({ ...matchInformation, mat: e.target.value });\n                break;\n            case \"age\":\n                {\n                    let zeroGender = Object.keys(categories[e.target.value])[0];\n                    let zeroStyle = Object.keys(categories[e.target.value][zeroGender])[0];\n                    let zeroWeight = categories[e.target.value][zeroGender][zeroStyle][0];\n                    setMatchInformation(\n                        {\n                            ...matchInformation,\n                            age: e.target.value,\n                            gender: zeroGender,\n                            style: zeroStyle,\n                            weight: zeroWeight\n                        });\n                }\n                break;\n            case \"gender\":\n                {\n                    let zeroStyle = Object.keys(categories[matchInformation.age][e.target.value])[0];\n                    let zeroWeight = categories[matchInformation.age][e.target.value][zeroStyle][0];\n                    setMatchInformation(\n                        {\n                            ...matchInformation,\n                            gender: e.target.value,\n                            style: zeroStyle,\n                            weight: zeroWeight\n                        });\n                }\n                break;\n            case \"style\":\n                {\n                    let zeroWeight = categories[matchInformation.age][matchInformation.gender][e.target.value][0];\n                    setMatchInformation(\n                        {\n                            ...matchInformation,\n                            style: e.target.value,\n                            weight: zeroWeight\n                        });\n                }\n                break;\n            case \"weight\":\n                setMatchInformation(\n                    {\n                        ...matchInformation,\n                        weight: parseInt(e.target.value)\n                    });\n                break;\n            default:\n                throw new Error(\"Error: dropdowns\");\n        }\n    }\n\n    return (\n        <div className=\"matchInformation\">\n            <label htmlFor=\"mat-select\">\n                Mat\n            <br />\n                <select\n                    onChange={e => updateDropDowns(e, \"mat\")}\n                    name=\"mat\" id=\"mat-select\">\n                    <option value=\"A\">A</option>\n                    <option value=\"B\">B</option>\n                </select>\n            </label>\n\n            <label htmlFor=\"age-select\">\n                Age\n            <br />\n                <select\n                    value={matchInformation.age}\n                    onChange={e =>\n                        updateDropDowns(e, \"age\")\n                    }\n                    name=\"age\" id=\"age-select\">\n                    {ageOptions}\n                </select>\n            </label>\n\n            <label htmlFor=\"gender-select\" style={matchInformation.gender === \"N/A\" ? { visibility: \"hidden\" } : {}}>\n                Gender\n            <br />\n                <select\n                    value={matchInformation.gender}\n                    onChange={e =>\n                        updateDropDowns(e, \"gender\")\n                    }\n                    name=\"gender\" id=\"gender-select\">\n                    {genderOptions}\n                </select>\n            </label>\n\n            <label htmlFor=\"style-select\" style={matchInformation.style === \"N/A\" ? { visibility: \"hidden\" } : {}}>\n                Style\n            <br />\n                <select\n                    value={matchInformation.style}\n                    onChange={e =>\n                        updateDropDowns(e, \"style\")\n                    }\n                    name=\"style\" id=\"style-select\">\n                    {styleOptions}\n                </select>\n            </label>\n\n            <label htmlFor=\"weight-select\">\n                Weight\n            <br />\n                <select\n                    value={matchInformation.weight}\n                    onChange={e =>\n                        updateDropDowns(e, \"weight\")\n                    }\n                    name=\"weight\" id=\"weight-select\">\n                    {weightOptions}\n                </select>\n            </label>\n        </div>\n    );\n\n};\n\ntype SubmitMatchDetails = {\n    setDetails: () => void;\n};\n\nconst SubmitMatchDetails: React.VFC<SubmitMatchDetails> = ({ setDetails }) => {\n    const totalDisplayMethod = useContext(ContextTotalDisplayMethod);\n    const [totalDisplayState, setTotalDisplayState] = totalDisplayMethod;\n    return (\n        <>\n            <button onClick={setDetails}>Confirm</button>\n            <button onClick={() => setTotalDisplayState({ ...totalDisplayState, playerEntryView: false })}>Cancel</button>\n        </>\n    );\n};","import React from 'react';\nimport './MainHeader.css';\n\ntype MainHeaderProps = {\n    visibility: boolean;\n};\n\nexport const MainHeader: React.VFC<MainHeaderProps> = ({ visibility }) => {\n    return (\n        <div id=\"mainHeader\" style={visibility ? {} : { visibility: \"hidden\" }}>\n            <span id=\"logo\"><img alt=\"Wrestling WA Logo\" src=\"http://wrestlingwa.org/wp-content/uploads/wwa_logo.png\" /></span>\n            <span id=\"fedName\">Wrestling Western Australia <br /> Scoreboard</span>\n        </div>\n    )\n};","import React from 'react';\nimport './Navigation.css';\n\ntype NavigationProps = {\n    visibility: boolean;\n    totalDisplayMethod: TotalDisplayMethod;\n    ResetCurrentMatch: () => void;\n};\n\nexport const Navigation: React.VFC<NavigationProps> = ({ visibility, totalDisplayMethod, ResetCurrentMatch }) => {\n    console.log(\"nav: \" + visibility);\n    console.log(totalDisplayMethod);\n    let [totalDisplayState, setTotalDisplayState] = totalDisplayMethod;\n\n    return (\n        <div id=\"navigation\" style={visibility ? {} : { visibility: \"hidden\" }}>\n            <button className=\"navigationButton\" id=\"setMatchButton\" onClick={() => setTotalDisplayState({ ...totalDisplayState, playerEntryView: true })}>Set Match</button>\n            <button className=\"navigationButton\" id=\"resetMatchButton\" onClick={() => ResetCurrentMatch()}>Reset All</button>\n            <button className=\"navigationButton\" id=\"importButton\">Import</button>\n            <button className=\"navigationButton\" id=\"fixturesButton\">Fixtures</button>\n            <button className=\"navigationButton\" id=\"prevButton\">{\"<<\"}</button>\n            <button className=\"navigationButton\" id=\"nextButton\">{\">>\"}</button>\n        </div>\n    )\n};","//Maintain all control logic and interfaces for scoreboard in this file.\n\nimport React from 'react';\nimport './Scoreboard.css';\n\n\ntype PointsControlProps = {\n    playerColour: string;\n    updateScore: (player: string, score: number) => void;\n};\n\nexport const PointsControl: React.VFC<PointsControlProps> = ({ playerColour, updateScore }) => {\n\n    return (\n        <div className={\"points-control \" + playerColour}>\n            <div className={\"buttonsRow \" + playerColour}>\n                <button onClick={() => updateScore(playerColour, 5)}>+5</button>\n                <button onClick={() => updateScore(playerColour, 4)}>+4</button>\n                <button onClick={() => updateScore(playerColour, 2)}>+2</button>\n                <button onClick={() => updateScore(playerColour, 1)}>+1</button>\n                <button onClick={() => updateScore(playerColour, -1)}>-1</button>\n            </div>\n        </div>\n    )\n};\n\ntype PenaltyControlProps = {\n    playerColour: string;\n};\n\nexport const PenaltyControl: React.VFC<PenaltyControlProps> = ({ playerColour }) => {\n\n    return (\n        <div className={\"penalty \" + playerColour}>\n            <button className=\"shotclockbtn\" id={\"shotclockbutton\" + playerColour}>Shot clock</button>\n            <button className=\"warning\">Warning</button>\n        </div>\n    )\n};\n\ntype PinControlProps = {\n    playerColour: string;\n};\n\nexport const PinControl: React.VFC<PinControlProps> = ({ playerColour }) => {\n\n    return (\n        <div className={\"pin \" + playerColour}>\n            <button>Pin!</button>\n        </div>\n    )\n};","import React, { useCallback, useEffect } from 'react';\nimport './Scoreboard.css';\nimport { capitaliseString } from './common';\nimport { PointsControl, PenaltyControl, PinControl } from './ScoreboardControl';\nimport type Timer from 'easytimer.js';\nimport '@fortawesome/fontawesome-free/js/all.js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst phases = [\"Before Match\", \"Period 1\", \"Between P1\", \"Rest\", \"Between P2\", \"Period 2\", \"Match End\"];\nconst timeRest = 30; // should be 30 seconds\n\ntype ScoreboardProps = {\n    visibility: boolean;\n    matchPlayerInformationMethod: MatchPlayerInformationMethod;\n    matchStateMethod: MatchStateMethod;\n    timer: Timer;\n    Victory: Victory;\n};\n\nexport const Scoreboard: React.VFC<ScoreboardProps> = ({ visibility, matchPlayerInformationMethod, matchStateMethod, timer, Victory }) => {\n\n    const [matchPlayerInformation, setMatchPlayerInformation] = matchPlayerInformationMethod;\n    const [matchState, setMatchState] = matchStateMethod;\n\n    const updateCurrentTime = useCallback(\n        () => {\n            setMatchState({ ...matchState, currentTime: timer.getTimeValues().toString(['minutes', 'seconds']).slice(1) });\n        },\n        [matchState, setMatchState, timer],\n    );\n\n    const resolveTimerEnd = useCallback(\n        () => {\n            if (matchState.phase === phases[1]) { //end of first period\n                setMatchState({ ...matchState, phase: phases[2], currentTime: \"0:00\", paused: true });\n            } else if (matchState.phase === phases[3]) { //end of rest period\n                setMatchState({ ...matchState, phase: phases[4], currentTime: \"0:00\", paused: true });\n            } else if (matchState.phase === phases[5]) { //end of second period\n                setMatchState({ ...matchState, phase: phases[6], currentTime: \"0:00\", paused: true });\n            }\n        },\n        [matchState, setMatchState],\n    );\n\n    useEffect(() => {\n        console.log(\"event listener Made!'\");\n        timer.addEventListener('secondsUpdated', updateCurrentTime);\n        timer.addEventListener('targetAchieved', resolveTimerEnd);\n        // returned function will be called on component unmount\n        return () => {\n            timer.removeEventListener('secondsUpdated', updateCurrentTime);\n            timer.removeEventListener('targetAchieved', resolveTimerEnd);\n        };\n    }, [resolveTimerEnd, timer, updateCurrentTime]);\n\n    const updateScore = (player: string, score: number) => {\n        //Need to add if timer is running then allow this\n        const allowableScoreChanges = [-1, 1, 2, 4, 5];\n        if (allowableScoreChanges.includes(score) && matchState.started) {\n            const newMatchPlayerInformation: { [playerColor: string]: MatchPlayer } = { ...matchPlayerInformation };\n            if (!(newMatchPlayerInformation[player].score === 0 && score < 0)) { //make sure score can't go below 0\n                newMatchPlayerInformation[player].score += score;\n                setMatchPlayerInformation(newMatchPlayerInformation);\n                checkVictoryState(matchPlayerInformation, matchState, timer, Victory);\n            }\n        }\n    };\n\n    return (\n        <div id=\"outer\">\n            <div id=\"scoreboard\" style={visibility ? {} : { visibility: \"hidden\" }}>\n                <PlayerDataView playerColour=\"red\" matchPlayerInformation={matchPlayerInformation} />\n                <MiddleView matchState={matchState} setMatchState={setMatchState} timer={timer} matchPlayerInformation={matchPlayerInformation} Victory={Victory} />\n                <PlayerDataView playerColour=\"blue\" matchPlayerInformation={matchPlayerInformation} />\n                <ScoreBox playerColour=\"red\" matchPlayerInformation={matchPlayerInformation} />\n                <ScoreBox playerColour=\"blue\" matchPlayerInformation={matchPlayerInformation} />\n                <PointsControl playerColour=\"red\" updateScore={updateScore} />\n                <PointsControl playerColour=\"blue\" updateScore={updateScore} />\n                <PenaltyControl playerColour=\"red\" />\n                <PenaltyControl playerColour=\"blue\" />\n                <PinControl playerColour=\"red\" />\n                <PinControl playerColour=\"blue\" />\n            </div>\n        </div>\n    )\n};\n\ntype MiddleViewProps = {\n    matchState: MatchState;\n    timer: Timer;\n    setMatchState: React.Dispatch<React.SetStateAction<MatchState>>;\n    matchPlayerInformation: MatchPlayerInformation;\n    Victory: Victory;\n};\n\nconst MiddleView: React.VFC<MiddleViewProps> = ({ matchState, timer, setMatchState, matchPlayerInformation, Victory }) => {\n\n    const playButtonPress = () => {\n        let initialTimerValue = 0;\n        if (matchState.gameType === \"Junior Freestyle\") {\n            initialTimerValue = 120;\n        } else {\n            initialTimerValue = 180;\n        }\n\n        if (matchState.phase === phases[0] && matchState.playersSet) { //if phase is Before Match\n            setMatchState({ ...matchState, phase: phases[1], started: true });\n            timer.start({ countdown: true, startValues: { seconds: initialTimerValue } });\n        } else if (matchState.phase === phases[2] && matchState.started) { //if between phase but before timer start\n            setMatchState({ ...matchState, phase: phases[3], paused: false })\n            timer.start({ countdown: true, startValues: { seconds: timeRest } });\n        } else if (matchState.phase === phases[4] && matchState.started) { //if period 2 but before timer start\n            setMatchState({ ...matchState, phase: phases[5], paused: false })\n            timer.start({ countdown: true, startValues: { seconds: initialTimerValue } });\n        } else if (matchState.phase === phases[6] && matchState.started) { //if end of period 2\n            console.log(`Match has ended`);\n            checkVictoryState(matchPlayerInformation, matchState, timer, Victory);\n        } else if (matchState.started && !matchState.paused) { //pause\n            setMatchState({ ...matchState, paused: true })\n            timer.pause();\n        } else if (matchState.started && matchState.paused) { //unpause\n            setMatchState({ ...matchState, paused: false })\n            timer.start();\n        }\n    }\n\n    return (\n        <div className=\"middle\" style={matchState.paused ? { backgroundColor: \"grey\" } : {}}>\n            <span id=\"period\">{matchState.phase}</span><br />\n            <span id=\"gameType\">{`${matchState.gameType}, ${matchState.age}, ${matchState.weight}kg`}</span>\n            <br />\n            <span id=\"timer\">{matchState.currentTime}</span>\n            <br />\n            <button className=\"timer\" id=\"startTimer\" onClick={playButtonPress}>{\n                (matchState.phase === \"Before Match\")\n                    ? \"▶\" : (!matchState.paused) ? <FontAwesomeIcon icon={[\"fas\", \"pause\"]} /> : (matchState.paused) ? \"▶\" : \"bug\"\n            }\n            </button>\n        </div>\n    )\n};\n\ntype PlayerDataViewProps = {\n    playerColour: string;\n    matchPlayerInformation: { [playerColor: string]: MatchPlayer };\n};\n\nconst PlayerDataView: React.VFC<PlayerDataViewProps> = ({ playerColour, matchPlayerInformation }) => {\n\n    return (\n        <div className={\"playerData \" + playerColour} >\n            <span className={\"firstName \" + capitaliseString(playerColour)}>{matchPlayerInformation[playerColour].firstName}</span><br />\n            <span className={\"lastName \" + capitaliseString(playerColour)}>{matchPlayerInformation[playerColour].lastName}</span><br />\n            <span className={\"clubName \" + capitaliseString(playerColour)}>{matchPlayerInformation[playerColour].clubName}</span>\n        </div >\n    )\n};\n\ntype ScoreBoxProps = {\n    playerColour: string;\n    matchPlayerInformation: { [playerColor: string]: MatchPlayer };\n};\n\nconst ScoreBox: React.VFC<ScoreBoxProps> = ({ playerColour, matchPlayerInformation }) => {\n\n    return (\n        <div className={\"scorebox \" + playerColour}>\n            <div className={\"markerWarning \" + capitaliseString(playerColour)}></div>\n            <div className={\"score \" + capitaliseString(playerColour)}>{matchPlayerInformation[playerColour].score}</div>\n            <div className={\"shotclock \" + capitaliseString(playerColour)}>0:00</div>\n        </div>\n    )\n};\n\nconst checkVictoryState = (matchPlayerInformation: MatchPlayerInformation, matchState: MatchState, timer: Timer, Victory: Victory) => { //Resolves victory conditions\n    // Intra Time Victory Conditions\n    let technicalSuperiorityThreshold = 10;\n    if (matchState.style === \"Greco-Roman\") {\n        // Greco-Roman Technical Superiority\n        technicalSuperiorityThreshold = 8;\n    } else if (matchState.style === \"Freestyle\") {\n        // Freestyle Technical Superiority\n        technicalSuperiorityThreshold = 10;\n    }\n\n    if (matchPlayerInformation.blue.score - matchPlayerInformation.red.score >= technicalSuperiorityThreshold) {\n        timer.pause();\n        Victory(\"blue\", \"Technical Superiority\");\n    } else if (matchPlayerInformation.red.score - matchPlayerInformation.blue.score >= technicalSuperiorityThreshold) {\n        timer.pause();\n        Victory(\"red\", \"Technical Superiority\");\n    }\n\n    //End of Time Victory Check\n    if (matchState.phase === phases[6]) {\n        if (matchPlayerInformation.blue.score === matchPlayerInformation.red.score) {\n            Victory(\"draw\", \"Points\");\n            console.log(\"Outcome is draw\");\n        } else if (matchPlayerInformation.blue.score - matchPlayerInformation.red.score > 0) {\n            Victory(\"blue\", \"Points\");\n        } else {\n            Victory(\"red\", \"Points\");\n        }\n    }\n};","import React from 'react';\nimport './VictoryScreen.css';\n\ntype VictoryScreenProps = {\n    visibility: boolean;\n    victoryState: VictoryState;\n    SetVisibilityOf: (component: string, state: boolean) => void;\n};\n\nexport const VictoryScreen: React.VFC<VictoryScreenProps> = ({ visibility, victoryState, SetVisibilityOf }) => {\n    const victoryScreenView = () => {\n        if (victoryState.playerColour === \"draw\") {\n            return (\n                <div className=\"victoryScreenView\" style={{ backgroundColor: \"black\" }}>\n                    <p>Draw!</p>\n                    <button onClick={() => SetVisibilityOf(\"victoryScreen\", false)}>OK</button>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"victoryScreenView\" style={victoryState.playerColour === \"red\" ? { backgroundColor: \"red\" } : { backgroundColor: \"blue\" }}>\n                    <p>{victoryState.playerName} <br /> wins by <br /> {victoryState.reason}</p>\n                    <button onClick={() => SetVisibilityOf(\"victoryScreen\", false)}>OK</button>\n                </div>\n            );\n        }\n    }\n\n    return (\n        < div style={visibility ? {\n            top: \"0\",\n            left: \"0\",\n            width: \"100vw\",\n            height: \"100vh\",\n            position: \"fixed\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            backgroundColor: \"#8080807E\",\n        }\n            : { display: \"none\" }}>\n            {victoryScreenView()}\n        </div>\n    )\n};\n\n","import React, { useState } from 'react';\nimport './App.css';\nimport Timer from 'easytimer.js';\n\nimport { PlayerEntryView } from './PlayerEntryView';\nimport { MainHeader } from './MainHeader';\nimport { Navigation } from './Navigation';\nimport { Scoreboard } from './Scoreboard';\nimport { VictoryScreen } from './VictoryScreen';\n\nconst initialTotalDisplayState: TotalDisplayState = {\n  mainHeader: true,\n  navigation: true,\n  playerEntryView: false,\n  scoreboard: true,\n  victoryScreen: false,\n};\n\nconst initialMatchPlayerInformation: MatchPlayerInformation = {\n  red: {\n    \"playerColor\": \"red\",\n    \"firstName\": \"firstName\",\n    \"lastName\": \"lastName\",\n    \"clubName\": \"clubName\",\n    \"warnings\": 0,\n    \"score\": 0\n  },\n  blue: {\n    \"playerColor\": \"blue\",\n    \"firstName\": \"firstName\",\n    \"lastName\": \"lastName\",\n    \"clubName\": \"clubName\",\n    \"warnings\": 0,\n    \"score\": 0\n  }\n};\n\nconst initialMatchState: MatchState = {\n  mat: \"\",\n  age: \"\",\n  gender: \"\",\n  style: \"\",\n  gameType: \"\",\n  weight: 0,\n  currentTime: \"0:00\",\n  playersSet: false,\n  started: false,\n  paused: false,\n  phase: \"Before Match\"\n};\n\nconst initialVictoryState: VictoryState = {\n  playerName: \"\",\n  playerColour: \"\",\n  reason: \"\"\n};\n\nconst App: React.VFC = () => {\n  const [totalDisplayState, setTotalDisplayState] = useState(initialTotalDisplayState);\n  const totalDisplayMethod: TotalDisplayMethod = [totalDisplayState, setTotalDisplayState];\n\n  const [matchPlayerInformation, setMatchPlayerInformation] = useState(initialMatchPlayerInformation);\n  const matchPlayerInformationMethod: MatchPlayerInformationMethod = [matchPlayerInformation, setMatchPlayerInformation]\n\n  const [matchState, setMatchState] = useState(initialMatchState);\n  const matchStateMethod: MatchStateMethod = [matchState, setMatchState];\n\n  const [timer,] = useState(new Timer());\n  const [victoryState, setVictoryState] = useState(initialVictoryState);\n\n  const ResetCurrentMatch = () => {\n    setMatchPlayerInformation({ ...initialMatchPlayerInformation });\n    setMatchState({ ...initialMatchState });\n    timer.stop();\n  };\n\n  const Victory = (player: string, reason: string) => {\n    const playerInfo: { [playerColor: string]: MatchPlayer } = { ...matchPlayerInformation };\n    setTotalDisplayState({ ...totalDisplayState, victoryScreen: true });\n    if (player === \"draw\") {\n      setVictoryState({ ...victoryState, reason: reason, playerColour: player, playerName: player });\n    } else {\n      setVictoryState({ ...victoryState, reason: reason, playerColour: player, playerName: `${playerInfo[player].firstName} ${playerInfo[player].lastName}` });\n    }\n  }\n\n  const SetVisibilityOf = (component: string, state: boolean) => {\n    const newTotalDisplayState: { [value: string]: boolean } = { ...totalDisplayState };\n    newTotalDisplayState[component] = state;\n    setTotalDisplayState(newTotalDisplayState as TotalDisplayState);\n  };\n\n  console.log(matchState);\n  console.log(matchPlayerInformation);\n\n  return (\n    <>\n      <MainHeader visibility={totalDisplayState.mainHeader} />\n      <Navigation visibility={totalDisplayState.navigation} totalDisplayMethod={totalDisplayMethod} ResetCurrentMatch={ResetCurrentMatch} />\n      <PlayerEntryView visibility={totalDisplayState.playerEntryView} totalDisplayMethod={totalDisplayMethod} matchStateMethod={matchStateMethod} matchPlayerInformationMethod={matchPlayerInformationMethod} />\n      <Scoreboard visibility={totalDisplayState.scoreboard} matchPlayerInformationMethod={matchPlayerInformationMethod} matchStateMethod={matchStateMethod} timer={timer} Victory={Victory} />\n      <VictoryScreen visibility={totalDisplayState.victoryScreen} victoryState={victoryState} SetVisibilityOf={SetVisibilityOf} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}